# DO NOT EDIT. Generated from /extra/github-actions
name: CI
on: [push, pull_request]

jobs:
  # linux-build:
  #   runs-on: ubuntu-latest
  #   env:
  #     PLATFORM: linux64
  #   steps:
  #     - uses: actions/checkout@master
  #       with:
  #         submodules: recursive

  #     @import build-linux.yml

  mac-build:
    runs-on: macos-latest
    env:
      PLATFORM: mac
    steps:
      - uses: actions/checkout@master
        with:
          submodules: recursive

      - name: Install Neko using snapshot from S3 (Windows)
        if: startsWith(env.PLATFORM, 'windows')
        shell: pwsh
        run: |
          $DOWNLOADDIR="./temp"
          new-item -Name $DOWNLOADDIR -ItemType directory
          Invoke-WebRequest https://build.haxe.org/builds/neko/$PLATFORM/neko_latest.zip -OutFile $DOWNLOADDIR/neko_latest.zip
          Expand-Archive $DOWNLOADDIR/neko_latest.zip -DestinationPath $DOWNLOADDIR
          $NEKOPATH = Get-ChildItem $DOWNLOADDIR/neko-*-*
          Write-Host "::add-path::$NEKOPATH"
          Write-Host "::set-env name=NEKOPATH::$NEKOPATH"
      
      - name: Install Neko using snapshot from S3 (Unix)
        # if: (!startsWith(env.PLATFORM, 'windows'))
        if: (startsWith(env.PLATFORM, 'linux'))
        run: |
          set -ex
          sudo add-apt-repository ppa:haxe/snapshots -y
          sudo apt-get update -qqy
          sudo apt-get install -qqy neko
      
          # DOWNLOADDIR="./temp"
          # mkdir $DOWNLOADDIR
          # curl -sSL https://build.haxe.org/builds/neko/$PLATFORM/neko_latest.tar.gz -o $DOWNLOADDIR/neko_latest.tar.gz
          # tar -xf $DOWNLOADDIR/neko_latest.tar.gz -C $DOWNLOADDIR
          # NEKOPATH=`echo $DOWNLOADDIR/neko-*-*`
          # sudo mkdir -p /usr/local/bin
          # sudo mkdir -p /usr/local/lib/neko
          # sudo ln -s $NEKOPATH/{neko,nekoc,nekoml,nekotools}  /usr/local/bin/
          # sudo ln -s $NEKOPATH/libneko.*                      /usr/local/lib/
          # sudo ln -s $NEKOPATH/*.ndll                         /usr/local/lib/neko/
          # sudo ln -s $NEKOPATH/nekoml.std                     /usr/local/lib/neko/
          # sudo ln -s $NEKOPATH/include/*.h                    /usr/local/include/
          # set +x
          # echo ::add-path::$NEKOPATH
          # echo ::set-env name=NEKOPATH::$NEKOPATH
      
      - name: Install Neko using snapshot from S3 (Mac)
        if: (startsWith(env.PLATFORM, 'mac'))
        run: |
          set -ex
          HOMEBREW_NO_AUTO_UPDATE=1
          brew install neko
      
      - name: ldconfig
        if: env.PLATFORM == 'linux64'
        run: |
          sudo ldconfig
          sudo ldconfig /usr/local/lib
      
      - name: Print Neko version
        run: neko -version 2>&1
      
      

      - name: Install dependencies
        run: |
          set -ex
          brew update || brew update || brew update
          brew unlink python@2
          brew bundle --file=tests/Brewfile --no-upgrade
      
      - name: Install OCaml libraries
        run: |
          set -ex
          opam init --yes --disable-sandboxing
          opam update
          opam pin add haxe . --no-action
          opam install haxe --deps-only --yes
          opam list
          ocamlopt -v
      
      - name: Build Haxe
        run: |
          set -ex
          eval $(opam env)
          opam config exec -- make -s -j`sysctl -n hw.ncpu` STATICLINK=1 "LIB_PARAMS=/usr/local/opt/zlib/lib/libz.a /usr/local/lib/libpcre.a /usr/local/lib/libmbedtls.a /usr/local/lib/libmbedcrypto.a /usr/local/lib/libmbedx509.a -cclib '-framework Security -framework CoreFoundation'" haxe
          opam config exec -- make -s haxelib
          make
          # ls -l out
          otool -L ./haxe
          otool -L ./haxelib
          mkdir out
          mv ./haxe ./out
          mv ./haxelib ./out
      
      - name: Upload artifact
        uses: actions/upload-artifact@v1.0.0
        with:
          name: macBinaries
          path: out
      

  linux-test:
    if: false
    # needs: linux-build
    runs-on: ubuntu-latest
    env:
      PLATFORM: linux64
      TEST: ${{matrix.target}}
      HXCPP_COMPILE_CACHE: ~/hxcache
    strategy:
      fail-fast: false
      matrix:
        target: [macro, js, hl, cpp, 'java,jvm', cs, php, python, lua, flash9, neko]
        include:
          - target: js
            # SAUCE: 1
            # SAUCE_TUNNEL_ID: 'linux-test'
            # SAUCE_BUILD: '${{env.GITHUB_RUN_NUMBER}}' # $(Build.BuildNumber)
          - target: hl
            APT_PACKAGES: cmake ninja-build
          - target: cpp
            APT_PACKAGES: gcc-multilib g++-multilib
          - target: lua
            APT_PACKAGES: ncurses-dev
          - target: flash9
            APT_PACKAGES: libglib2.0 libfreetype6 xvfb
    steps:
      - uses: actions/checkout@master
        with:
          submodules: recursive
      # - uses: actions/download-artifact@v1
      #   with:
      #     name: linuxBinaries

      - name: Install Neko using snapshot from S3 (Windows)
        if: startsWith(env.PLATFORM, 'windows')
        shell: pwsh
        run: |
          $DOWNLOADDIR="./temp"
          new-item -Name $DOWNLOADDIR -ItemType directory
          Invoke-WebRequest https://build.haxe.org/builds/neko/$PLATFORM/neko_latest.zip -OutFile $DOWNLOADDIR/neko_latest.zip
          Expand-Archive $DOWNLOADDIR/neko_latest.zip -DestinationPath $DOWNLOADDIR
          $NEKOPATH = Get-ChildItem $DOWNLOADDIR/neko-*-*
          Write-Host "::add-path::$NEKOPATH"
          Write-Host "::set-env name=NEKOPATH::$NEKOPATH"
      
      - name: Install Neko using snapshot from S3 (Unix)
        # if: (!startsWith(env.PLATFORM, 'windows'))
        if: (startsWith(env.PLATFORM, 'linux'))
        run: |
          set -ex
          sudo add-apt-repository ppa:haxe/snapshots -y
          sudo apt-get update -qqy
          sudo apt-get install -qqy neko
      
          # DOWNLOADDIR="./temp"
          # mkdir $DOWNLOADDIR
          # curl -sSL https://build.haxe.org/builds/neko/$PLATFORM/neko_latest.tar.gz -o $DOWNLOADDIR/neko_latest.tar.gz
          # tar -xf $DOWNLOADDIR/neko_latest.tar.gz -C $DOWNLOADDIR
          # NEKOPATH=`echo $DOWNLOADDIR/neko-*-*`
          # sudo mkdir -p /usr/local/bin
          # sudo mkdir -p /usr/local/lib/neko
          # sudo ln -s $NEKOPATH/{neko,nekoc,nekoml,nekotools}  /usr/local/bin/
          # sudo ln -s $NEKOPATH/libneko.*                      /usr/local/lib/
          # sudo ln -s $NEKOPATH/*.ndll                         /usr/local/lib/neko/
          # sudo ln -s $NEKOPATH/nekoml.std                     /usr/local/lib/neko/
          # sudo ln -s $NEKOPATH/include/*.h                    /usr/local/include/
          # set +x
          # echo ::add-path::$NEKOPATH
          # echo ::set-env name=NEKOPATH::$NEKOPATH
      
      - name: Install Neko using snapshot from S3 (Mac)
        if: (startsWith(env.PLATFORM, 'mac'))
        run: |
          set -ex
          HOMEBREW_NO_AUTO_UPDATE=1
          brew install neko
      
      - name: ldconfig
        if: env.PLATFORM == 'linux64'
        run: |
          sudo ldconfig
          sudo ldconfig /usr/local/lib
      
      - name: Print Neko version
        run: neko -version 2>&1
      
      

      - name: Setup Haxe
        run: |
          curl -sSL https://build.haxe.org/builds/haxe/linux64/haxe_latest.tar.gz -o ./haxe_latest.tar.gz
          tar -xf ./haxe_latest.tar.gz -C ./
          find . -depth -type d -name 'haxe_*' -exec mv {} linuxBinaries \;
      
          set -ex
          sudo mkdir -p /usr/local/bin/
          sudo mkdir -p /usr/local/share/haxe/
          sudo ln -s `pwd`/linuxBinaries/haxe /usr/local/bin/haxe
          sudo ln -s `pwd`/linuxBinaries/haxelib /usr/local/bin/haxelib
          # sudo ln -s `pwd`/linuxBinaries/std /usr/local/share/haxe/std
          sudo ln -s `pwd`/std /usr/local/share/haxe/std
      
      - name: Print Haxe version
        run: haxe -version
      
      - name: Setup haxelib
        run: |
          set -ex
          mkdir ~/haxelib
          haxelib setup ~/haxelib
      
      - name: Install apt packages
        if: matrix.APT_PACKAGES
        run: |
          set -ex
          sudo apt update -qqy
          sudo apt install -qqy ${{matrix.APT_PACKAGES}}
      
      - name: Flash setup
        if: matrix.target == 'flash9'
        run: export DISPLAY=:99.0
      
      - name: Test
        if: success() && !(matrix.SAUCE && matrix.SAUCE_ACCESS_KEY)
        run: haxe RunCi.hxml
        working-directory: ${{github.workspace}}/tests
      
      - name: Test (with SauceLabs)
        if: matrix.target == 'js' && success() && matrix.SAUCE && matrix.SAUCE_ACCESS_KEY
        run: haxe RunCi.hxml
        working-directory: ${{github.workspace}}/tests
        env:
          SAUCE_ACCESS_KEY: matrix.SAUCE_ACCESS_KEY
      

  mac-test:
    # needs: mac-build
    runs-on: macos-latest
    env:
      PLATFORM: mac
      TEST: ${{matrix.target}}
      HXCPP_COMPILE_CACHE: ~/hxcache
    strategy:
      fail-fast: false
      matrix:
        target: [macro, js, hl, cpp, 'java,jvm', cs, php, python, lua, flash9, neko]
        include:
          - target: hl
            BREW_PACKAGES: ninja
    steps:
      - uses: actions/checkout@master
        with:
          submodules: recursive
      # - uses: actions/download-artifact@v1
      #   with:
      #     name: macBinaries

      - name: Install Neko using snapshot from S3 (Windows)
        if: startsWith(env.PLATFORM, 'windows')
        shell: pwsh
        run: |
          $DOWNLOADDIR="./temp"
          new-item -Name $DOWNLOADDIR -ItemType directory
          Invoke-WebRequest https://build.haxe.org/builds/neko/$PLATFORM/neko_latest.zip -OutFile $DOWNLOADDIR/neko_latest.zip
          Expand-Archive $DOWNLOADDIR/neko_latest.zip -DestinationPath $DOWNLOADDIR
          $NEKOPATH = Get-ChildItem $DOWNLOADDIR/neko-*-*
          Write-Host "::add-path::$NEKOPATH"
          Write-Host "::set-env name=NEKOPATH::$NEKOPATH"
      
      - name: Install Neko using snapshot from S3 (Unix)
        # if: (!startsWith(env.PLATFORM, 'windows'))
        if: (startsWith(env.PLATFORM, 'linux'))
        run: |
          set -ex
          sudo add-apt-repository ppa:haxe/snapshots -y
          sudo apt-get update -qqy
          sudo apt-get install -qqy neko
      
          # DOWNLOADDIR="./temp"
          # mkdir $DOWNLOADDIR
          # curl -sSL https://build.haxe.org/builds/neko/$PLATFORM/neko_latest.tar.gz -o $DOWNLOADDIR/neko_latest.tar.gz
          # tar -xf $DOWNLOADDIR/neko_latest.tar.gz -C $DOWNLOADDIR
          # NEKOPATH=`echo $DOWNLOADDIR/neko-*-*`
          # sudo mkdir -p /usr/local/bin
          # sudo mkdir -p /usr/local/lib/neko
          # sudo ln -s $NEKOPATH/{neko,nekoc,nekoml,nekotools}  /usr/local/bin/
          # sudo ln -s $NEKOPATH/libneko.*                      /usr/local/lib/
          # sudo ln -s $NEKOPATH/*.ndll                         /usr/local/lib/neko/
          # sudo ln -s $NEKOPATH/nekoml.std                     /usr/local/lib/neko/
          # sudo ln -s $NEKOPATH/include/*.h                    /usr/local/include/
          # set +x
          # echo ::add-path::$NEKOPATH
          # echo ::set-env name=NEKOPATH::$NEKOPATH
      
      - name: Install Neko using snapshot from S3 (Mac)
        if: (startsWith(env.PLATFORM, 'mac'))
        run: |
          set -ex
          HOMEBREW_NO_AUTO_UPDATE=1
          brew install neko
      
      - name: ldconfig
        if: env.PLATFORM == 'linux64'
        run: |
          sudo ldconfig
          sudo ldconfig /usr/local/lib
      
      - name: Print Neko version
        run: neko -version 2>&1
      
      

      - name: Setup Haxe
        run: |
          curl -sSL https://build.haxe.org/builds/haxe/mac/haxe_latest.tar.gz -o ./haxe_latest.tar.gz
          tar -xf ./haxe_latest.tar.gz -C ./
          find . -depth -type d -name 'haxe_*' -exec mv {} macBinaries \;
      
          set -ex
          sudo mkdir -p /usr/local/bin/
          sudo mkdir -p /usr/local/share/haxe/
          sudo ln -s `pwd`/macBinaries/haxe /usr/local/bin/haxe
          sudo ln -s `pwd`/macBinaries/haxelib /usr/local/bin/haxelib
          # sudo ln -s `pwd`/macBinaries/std /usr/local/share/haxe/std
          sudo ln -s `pwd`/std /usr/local/share/haxe/std
      
      - name: Print Haxe version
        run: haxe -version
      
      - name: Setup haxelib
        run: |
          set -ex
          mkdir ~/haxelib
          haxelib setup ~/haxelib
      
      - name: Install homebrew packages
        if: matrix.BREW_PACKAGES
        run: brew install ${{matrix.BREW_PACKAGES}}
      
      - name: Test
        run: haxe RunCi.hxml
        working-directory: ${{github.workspace}}/tests
      
      


