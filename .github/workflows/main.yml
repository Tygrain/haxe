# DO NOT EDIT. Generated from /extra/github-actions
name: CI
on: [push, pull_request]

jobs:

  # windows64-build:
  #   runs-on: windows-latest
  #   if: false
  #   env:
  #     PLATFORM: windows64
  #     OPAMYES: 1
  #     CYG_MIRROR: http://mirrors.kernel.org/sourceware/cygwin/
  #     ARCH: 64
  #     MINGW_ARCH: x86_64
  #     CYGWIN_SETUP: https://cygwin.com/setup-x86_64.exe
  #     CYG_ROOT: C:/cygwin64
  #   steps:
  #     - uses: actions/checkout@master
  #       with:
  #         submodules: recursive

  #     @import install-neko.yml
  #     @import build-windows.yml

  # windows-build:
  #   runs-on: windows-latest
  #   if: false
  #   env:
  #     PLATFORM: windows
  #     OPAMYES: 1
  #     CYG_MIRROR: http://mirrors.kernel.org/sourceware/cygwin/
  #     ARCH: 32
  #     MINGW_ARCH: i686
  #     CYGWIN_SETUP: https://cygwin.com/setup-x86.exe
  #     CYG_ROOT: C:/cygwin
  #   steps:
  #     - uses: actions/checkout@master
  #       with:
  #         submodules: recursive

  #     @import install-neko.yml
  #     @import build-windows.yml

  # linux-build:
  #   runs-on: ubuntu-latest
  #   if: false
  #   env:
  #     PLATFORM: linux64
  #     OPAMYES: 1
  #   steps:
  #     - uses: actions/checkout@master
  #       with:
  #         submodules: recursive

  #     @import build-linux.yml

  # mac-build:
  #   runs-on: macos-latest
  #   if: false
  #   env:
  #     PLATFORM: mac
  #     OPAMYES: 1
  #   steps:
  #     - uses: actions/checkout@master
  #       with:
  #         submodules: recursive

  #     @import install-neko.yml
  #     @import build-mac.yml

  windows64-test:
    # needs: windows64-build
    runs-on: windows-latest
    env:
      PLATFORM: windows64
      TEST: ${{matrix.target}}
      HXCPP_COMPILE_CACHE: ~/hxcache
      ARCH: 64
      CYG_MIRROR: http://mirrors.kernel.org/sourceware/cygwin/
      CYGWIN_SETUP: https://cygwin.com/setup-x86_64.exe
      CYG_ROOT: C:/cygwin64
      HAXELIB_ROOT: C:/haxelib
    strategy:
      fail-fast: false
      matrix:
        # TODO. Lua/flash has never been enabled on our AppVeyor builds.
        target: [macro, js, hl, cpp, 'java,jvm', cs, php, python, neko]
    steps:
      - uses: actions/checkout@master
        with:
          submodules: recursive
      # - uses: actions/download-artifact@v1
      #   with:
      #     name: win${{env.ARCH}}Binaries

      # @import install-neko.yml
      # - name: Quick test
      #   run: |
      #     ls
      #     mkdir win64Binaries
      #     curl -sSL https://build.haxe.org/builds/haxe/windows64/haxe_latest.zip -o ./win64Binaries/haxe_latest.zip
      #     # unzip -qq ./win64Binaries/haxe_latest.zip -d ./win64Binaries/
      #     mv ./win64Binaries/haxe_latest.zip ./win64Binaries/haxe_bin.zip
      # - shell: pwsh
      #   run: |
      #     $name = Get-ChildItem ./haxe_*_* -Name
      #     Rename-Item ./$name haxe_bin.zip
      
      - name: Quick test
        shell: pwsh
        run: |
          curl -sSL https://frippery.org/files/busybox/busybox64.exe -o busybox64.exe
      
      
      - name: Setup Haxe
        shell: cmd
        run: |
          dir C:\
          busybox64.exe sh -c "set -ex; mkdir tmp; wget http://build.haxe.org/builds/haxe/windows64/haxe_latest.zip -P tmp; unzip tmp/haxe_latest.zip && mv haxe_* win64Binaries"
          echo ::add-path::%cd%\win64Binaries
      - name: Print Haxe version
        shell: cmd
        run: |
          haxe.exe -version
          echo %PATH%
          echo "Все тестировщики пидеры!"
      
      - name: "Make Python 3 be available as python3 in the cmdline"
        shell: pwsh
        run: |
          echo "$env:PATH"
          Set-PSDebug -Trace 1
          $pypath = python -c "import sys; print(sys.executable)"
          $py3path = $pypath.replace("python.exe","python3.exe")
          cmd /c mklink $py3path $pypath
          python3 -V
      
      - name: Setup haxelib
        shell: pwsh
        run: |
          mkdir "$(HAXELIB_ROOT)"
          haxelib setup "$(HAXELIB_ROOT)"
      
      - name: Test
        shell: pwsh
        run: |
          echo "$(PATH)"
          haxe RunCi.hxml
        working-directory: ${{github.workspace}}/tests
      

  # windows-test:
  #   # needs: windows-build
  #   runs-on: windows-latest
  #   if: false
  #   env:
  #     PLATFORM: windows
  #     TEST: ${{matrix.target}}
  #     HXCPP_COMPILE_CACHE: ~/hxcache
  #     ARCH: 32
  #     HAXELIB_ROOT: C:/haxelib
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       # TODO. Lua/flash has never been enabled on our AppVeyor builds.
  #       # jvm: https://github.com/HaxeFoundation/haxe/issues/8601
  #       target: [macro, js, hl, cpp, java, cs, php, python, neko]
  #   steps:
  #     - uses: actions/checkout@master
  #       with:
  #         submodules: recursive
  #     - uses: actions/download-artifact@v1
  #       with:
  #         name: win${{env.ARCH}}Binaries

  #     @import install-neko.yml
  #     @import test-windows.yml

  # linux-test:
  #   needs: linux-build
  #   runs-on: ubuntu-latest
  #   if: false
  #   env:
  #     PLATFORM: linux64
  #     TEST: ${{matrix.target}}
  #     HXCPP_COMPILE_CACHE: ~/hxcache
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       target: [macro, js, hl, cpp, 'java,jvm', cs, php, python, lua, flash9, neko]
  #       include:
  #         - target: js
  #           # SAUCE: 1
  #           # SAUCE_TUNNEL_ID: 'linux-test'
  #           # SAUCE_BUILD: '${{env.GITHUB_RUN_NUMBER}}' # $(Build.BuildNumber)
  #         - target: hl
  #           APT_PACKAGES: cmake ninja-build libturbojpeg-dev
  #         - target: cpp
  #           APT_PACKAGES: gcc-multilib g++-multilib
  #         - target: lua
  #           APT_PACKAGES: ncurses-dev
  #         - target: flash9
  #           APT_PACKAGES: libglib2.0 libfreetype6 xvfb
  #   steps:
  #     - uses: actions/checkout@master
  #       with:
  #         submodules: recursive
  #     - uses: actions/download-artifact@v1
  #       with:
  #         name: linuxBinaries

  #     @import install-neko.yml
  #     @import test-linux.yml

  # mac-test:
  #   needs: mac-build
  #   runs-on: macos-latest
  #   if: false
  #   env:
  #     PLATFORM: mac
  #     TEST: ${{matrix.target}}
  #     HXCPP_COMPILE_CACHE: ~/hxcache
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       target: [macro, js, hl, cpp, 'java,jvm', cs, php, python, lua, flash9, neko]
  #       include:
  #         - target: hl
  #           BREW_PACKAGES: ninja
  #   steps:
  #     - uses: actions/checkout@master
  #       with:
  #         submodules: recursive
  #     - uses: actions/download-artifact@v1
  #       with:
  #         name: macBinaries

  #     @import install-neko.yml
  #     @import test-mac.yml
