# DO NOT EDIT. Generated from /extra/github-actions
name: CI
on: [push, pull_request]

jobs:

  windows64-build:
    runs-on: windows-latest
    if: false
    env:
      PLATFORM: windows64
      OPAMYES: 1
      CYG_MIRROR: http://mirrors.kernel.org/sourceware/cygwin/
      ARCH: 64
      MINGW_ARCH: x86_64
      CYGWIN_SETUP: https://cygwin.com/setup-x86_64.exe
      CYG_ROOT: C:/cygwin64
    steps:
      - uses: actions/checkout@master
        with:
          submodules: recursive

      - name: Install Neko using snapshot from S3 (Windows)
        if: startsWith(env.PLATFORM, 'windows')
        shell: pwsh
        run: |
          $DOWNLOADDIR="./temp"
          new-item -Name $DOWNLOADDIR -ItemType directory
          Invoke-WebRequest https://build.haxe.org/builds/neko/$env:PLATFORM/neko_latest.zip -OutFile $DOWNLOADDIR/neko_latest.zip
          Expand-Archive $DOWNLOADDIR/neko_latest.zip -DestinationPath $DOWNLOADDIR
          $NEKOPATH = Get-ChildItem $DOWNLOADDIR/neko-*-*
          Write-Host "::add-path::$NEKOPATH"
          Write-Host "::set-env name=NEKOPATH::$NEKOPATH"
      
      - name: Install Neko using snapshot from S3 (Unix)
        # if: (!startsWith(env.PLATFORM, 'windows'))
        if: (startsWith(env.PLATFORM, 'linux'))
        run: |
          set -ex
          sudo add-apt-repository ppa:haxe/snapshots -y
          sudo apt-get update -qqy
          sudo apt-get install -qqy neko
      
          # DOWNLOADDIR="./temp"
          # mkdir $DOWNLOADDIR
          # curl -sSL https://build.haxe.org/builds/neko/$PLATFORM/neko_latest.tar.gz -o $DOWNLOADDIR/neko_latest.tar.gz
          # tar -xf $DOWNLOADDIR/neko_latest.tar.gz -C $DOWNLOADDIR
          # NEKOPATH=`echo $DOWNLOADDIR/neko-*-*`
          # sudo mkdir -p /usr/local/bin
          # sudo mkdir -p /usr/local/lib/neko
          # sudo ln -s $NEKOPATH/{neko,nekoc,nekoml,nekotools}  /usr/local/bin/
          # sudo ln -s $NEKOPATH/libneko.*                      /usr/local/lib/
          # sudo ln -s $NEKOPATH/*.ndll                         /usr/local/lib/neko/
          # sudo ln -s $NEKOPATH/nekoml.std                     /usr/local/lib/neko/
          # sudo ln -s $NEKOPATH/include/*.h                    /usr/local/include/
          # set +x
          # echo ::add-path::$NEKOPATH
          # echo ::set-env name=NEKOPATH::$NEKOPATH
      
      - name: Install Neko using snapshot from S3 (Mac)
        if: (startsWith(env.PLATFORM, 'mac'))
        run: |
          set -ex
          HOMEBREW_NO_AUTO_UPDATE=1
          brew install neko
      
      - name: ldconfig
        if: env.PLATFORM == 'linux64'
        run: |
          sudo ldconfig
          sudo ldconfig /usr/local/lib
      
      - name: Print Neko version
        run: neko -version 2>&1
      
      
      - name: choco install nsis
        shell: pwsh
        run: choco install --no-progress nsis.portable --version 3.02 -y
      - name: choco install things
        shell: pwsh
        run: choco install --no-progress curl wget 7zip.portable -y
      - name: Prepend Chocolatey path
        shell: pwsh
        run: Write-Host "::add-path::C:\ProgramData\chocolatey\bin"
      
      - name: Install OCaml and OCaml libraries
        shell: pwsh
        run: |
          Set-PSDebug -Trace 1
          curl.exe -fsSL -o cygwin-setup.exe --retry 3 $($env:CYGWIN_SETUP)
          Start-Process -FilePath "cygwin-setup.exe" -ArgumentList "-B -q -R $($env:CYG_ROOT) -l C:/tmp -s $($env:CYG_MIRROR) -P default -P make -P git -P zlib-devel -P rsync -P patch -P diffutils -P curl -P unzip -P tar -P m4 -P perl -P libpcre-devel -P mbedtls-devel -P mingw64-$($env:MINGW_ARCH)-zlib -P mingw64-$($env:MINGW_ARCH)-gcc-core -P mingw64-$($env:MINGW_ARCH)-pcre" -Wait
          curl.exe -fsSL -o "opam.tar.xz" --retry 3 https://github.com/fdopen/opam-repository-mingw/releases/download/0.0.0.2/opam$($env:ARCH).tar.xz
          curl.exe -fsSL -o "libmbedtls.tar.xz" --retry 3 https://github.com/Simn/mingw64-mbedtls/releases/download/2.16.3/mingw64-$($env:MINGW_ARCH)-mbedtls-2.16.3-1.tar.xz
          & "$($env:CYG_ROOT)/bin/bash.exe" @('-lc', 'echo "$OLDPWD"')
          & "$($env:CYG_ROOT)/bin/bash.exe" @('-lc', 'cd "$OLDPWD" && tar -C / -xvf libmbedtls.tar.xz')
          & "$($env:CYG_ROOT)/bin/bash.exe" @('-lc', 'cd "$OLDPWD" && tar -xf opam.tar.xz')
          & "$($env:CYG_ROOT)/bin/bash.exe" @('-lc', 'cd "$OLDPWD" && bash opam${ARCH}/install.sh')
          & "$($env:CYG_ROOT)/bin/bash.exe" @('-lc', 'opam init mingw "https://github.com/fdopen/opam-repository-mingw.git#opam2" --comp 4.07.0+mingw${ARCH}c --switch 4.07.0+mingw${ARCH}c --auto-setup --yes 2>&1')
          & "$($env:CYG_ROOT)/bin/bash.exe" @('-lc', 'opam update --yes 2>&1')
          & "$($env:CYG_ROOT)/bin/bash.exe" @('-lc', 'cd "$OLDPWD" && opam pin add haxe . --kind=path --no-action --yes 2>&1')
          & "$($env:CYG_ROOT)/bin/bash.exe" @('-lc', 'opam install haxe --deps-only --yes 2>&1')
          & "$($env:CYG_ROOT)/bin/bash.exe" @('-lc', 'opam list')
          & "$($env:CYG_ROOT)/bin/bash.exe" @('-lc', 'ocamlopt -v')
      
      - name: Expose mingw dll files
        shell: pwsh
        run: Write-Host "::add-path::${env:CYG_ROOT}/usr/$($env:MINGW_ARCH)-w64-mingw32/sys-root/mingw/bin"
      
      - name: Build Haxe
        shell: pwsh
        run: |
          Set-PSDebug -Trace 1
          & "$($env:CYG_ROOT)/bin/bash.exe" @('-lc', 'cd "$OLDPWD" && opam config exec -- make -s -f Makefile.win -j`nproc` haxe 2>&1')
          & "$($env:CYG_ROOT)/bin/bash.exe" @('-lc', 'cd "$OLDPWD" && opam config exec -- make -s -f Makefile.win haxelib 2>&1')
          & "$($env:CYG_ROOT)/bin/bash.exe" @('-lc', 'cd "$OLDPWD" && opam config exec -- make -f Makefile.win echo_package_files package_bin package_installer_win package_choco 2>&1')
          dir out
          & "$($env:CYG_ROOT)/bin/bash.exe" @('-lc', 'cd "$OLDPWD" && cygcheck ./haxe.exe')
          & "$($env:CYG_ROOT)/bin/bash.exe" @('-lc', 'cd "$OLDPWD" && cygcheck ./haxelib.exe')
      
      - name: Move haxe binaries
        shell: pwsh
        run: |
          # & "$($env:CYG_ROOT)/bin/bash.exe" @('-lc', 'cd "$OLDPWD" && mkdir ./out')
          & "$($env:CYG_ROOT)/bin/bash.exe" @('-lc', 'cd "$OLDPWD" && ls ./out')
          # & "$($env:CYG_ROOT)/bin/bash.exe" @('-lc', 'cd "$OLDPWD" && mv ./haxe.exe ./out')
          # & "$($env:CYG_ROOT)/bin/bash.exe" @('-lc', 'cd "$OLDPWD" && mv ./haxelib.exe ./out')
      
      - name: Upload artifact
        uses: actions/upload-artifact@v1.0.0
        with:
          name: win${{env.ARCH}}Binaries
          path: out
      

  # windows-build:
  #   runs-on: windows-latest
  #   if: false
  #   env:
  #     PLATFORM: windows
  #     OPAMYES: 1
  #     CYG_MIRROR: http://mirrors.kernel.org/sourceware/cygwin/
  #     ARCH: 32
  #     MINGW_ARCH: i686
  #     CYGWIN_SETUP: https://cygwin.com/setup-x86.exe
  #     CYG_ROOT: C:/cygwin
  #   steps:
  #     - uses: actions/checkout@master
  #       with:
  #         submodules: recursive

  #     @import install-neko.yml
  #     @import build-windows.yml

  # linux-build:
  #   runs-on: ubuntu-latest
  #   if: false
  #   env:
  #     PLATFORM: linux64
  #     OPAMYES: 1
  #   steps:
  #     - uses: actions/checkout@master
  #       with:
  #         submodules: recursive

  #     @import build-linux.yml

  # mac-build:
  #   runs-on: macos-latest
  #   if: false
  #   env:
  #     PLATFORM: mac
  #     OPAMYES: 1
  #   steps:
  #     - uses: actions/checkout@master
  #       with:
  #         submodules: recursive

  #     @import install-neko.yml
  #     @import build-mac.yml

  windows64-test:
    # needs: windows64-build
    runs-on: windows-latest
    env:
      PLATFORM: windows64
      TEST: ${{matrix.target}}
      HXCPP_COMPILE_CACHE: ~/hxcache
      ARCH: 64
      HAXELIB_ROOT: C:/haxelib
    strategy:
      fail-fast: false
      matrix:
        # TODO. Lua/flash has never been enabled on our AppVeyor builds.
        target: [macro, js, hl, cpp, 'java,jvm', cs, php, python, neko]
    steps:
      - uses: actions/checkout@master
        with:
          submodules: recursive
      # - uses: actions/download-artifact@v1
      #   with:
      #     name: win${{env.ARCH}}Binaries

      - name: Install Neko using snapshot from S3 (Windows)
        if: startsWith(env.PLATFORM, 'windows')
        shell: pwsh
        run: |
          $DOWNLOADDIR="./temp"
          new-item -Name $DOWNLOADDIR -ItemType directory
          Invoke-WebRequest https://build.haxe.org/builds/neko/$env:PLATFORM/neko_latest.zip -OutFile $DOWNLOADDIR/neko_latest.zip
          Expand-Archive $DOWNLOADDIR/neko_latest.zip -DestinationPath $DOWNLOADDIR
          $NEKOPATH = Get-ChildItem $DOWNLOADDIR/neko-*-*
          Write-Host "::add-path::$NEKOPATH"
          Write-Host "::set-env name=NEKOPATH::$NEKOPATH"
      
      - name: Install Neko using snapshot from S3 (Unix)
        # if: (!startsWith(env.PLATFORM, 'windows'))
        if: (startsWith(env.PLATFORM, 'linux'))
        run: |
          set -ex
          sudo add-apt-repository ppa:haxe/snapshots -y
          sudo apt-get update -qqy
          sudo apt-get install -qqy neko
      
          # DOWNLOADDIR="./temp"
          # mkdir $DOWNLOADDIR
          # curl -sSL https://build.haxe.org/builds/neko/$PLATFORM/neko_latest.tar.gz -o $DOWNLOADDIR/neko_latest.tar.gz
          # tar -xf $DOWNLOADDIR/neko_latest.tar.gz -C $DOWNLOADDIR
          # NEKOPATH=`echo $DOWNLOADDIR/neko-*-*`
          # sudo mkdir -p /usr/local/bin
          # sudo mkdir -p /usr/local/lib/neko
          # sudo ln -s $NEKOPATH/{neko,nekoc,nekoml,nekotools}  /usr/local/bin/
          # sudo ln -s $NEKOPATH/libneko.*                      /usr/local/lib/
          # sudo ln -s $NEKOPATH/*.ndll                         /usr/local/lib/neko/
          # sudo ln -s $NEKOPATH/nekoml.std                     /usr/local/lib/neko/
          # sudo ln -s $NEKOPATH/include/*.h                    /usr/local/include/
          # set +x
          # echo ::add-path::$NEKOPATH
          # echo ::set-env name=NEKOPATH::$NEKOPATH
      
      - name: Install Neko using snapshot from S3 (Mac)
        if: (startsWith(env.PLATFORM, 'mac'))
        run: |
          set -ex
          HOMEBREW_NO_AUTO_UPDATE=1
          brew install neko
      
      - name: ldconfig
        if: env.PLATFORM == 'linux64'
        run: |
          sudo ldconfig
          sudo ldconfig /usr/local/lib
      
      - name: Print Neko version
        run: neko -version 2>&1
      
      
      # - name: Quick test
      #   run: |
      #     ls
      #     mkdir win64Binaries
      #     curl -sSL https://build.haxe.org/builds/haxe/windows64/haxe_latest.zip -o ./win64Binaries/haxe_latest.zip
      #     # unzip -qq ./win64Binaries/haxe_latest.zip -d ./win64Binaries/
      #     mv ./win64Binaries/haxe_latest.zip ./win64Binaries/haxe_bin.zip
      # - shell: pwsh
      #   run: |
      #     $name = Get-ChildItem ./haxe_*_* -Name
      #     Rename-Item ./$name haxe_bin.zip
      
      - name: Quick test
        shell: bash
        run: |
          mkdir win64Binaries
          curl -sSL https://build.haxe.org/builds/haxe/windows64/haxe_latest.zip -o ./win64Binaries/haxe_bin.zip
      
      - name: Setup Haxe
        shell: bash
        run: |
          set -ex
          unzip -qq ./win64Binaries/haxe_bin.zip -d ./win64Binaries/
          # mv ./win64Binaries/haxe_latest.zip ./win64Binaries/haxe_bin.zip
          HAXEPATH=`echo $PWD/win64Binaries/haxe_*_*`
          HAXEPATH="$HAXEPATH" | sed 's/\//\\/g'
          # HAXEPATH2=`echo $PWD/`
          # ls $HAXEPATH
          # set PATH="$HAXEPATH:$PATH"
          # set PATH="$HAXEPATH2:$PATH"
          echo "::add-path::$HAXEPATH"
          # echo "::add-path::$HAXEPATH2"
      
      # - name: Setup Haxe
      #   shell: pwsh
      #   run: |
      #     Set-PSDebug -Trace 1
      #     new-item -Name "win64Binaries" -ItemType directory
      #     Invoke-WebRequest https://build.haxe.org/builds/haxe/windows64/haxe_latest.zip -OutFile ./win64Binaries/haxe_bin.zip
      
      #     Set-PSDebug -Trace 1
      #     7z x ./win$($env:ARCH)Binaries/*_bin.zip -owin$($env:ARCH)Binaries
      #     $folder = Get-ChildItem ./win$($env:ARCH)Binaries/haxe_*_* -Name -Directory
      #     echo "$folder"
      #     Rename-Item ./win$($env:ARCH)Binaries/$folder haxe
      #     $folder = '' + ( get-location ) + "\win$($env:ARCH)Binaries\haxe"
      
      #     echo "$folder"
      #     dir "./win$($env:ARCH)Binaries"
      #     dir "./win$($env:ARCH)Binaries\haxe"
      #     dir '' + ( get-location ) + "\win$($env:ARCH)Binaries"
      #     dir '' + ( get-location ) + "\win$($env:ARCH)Binaries\haxe"
      #     dir $folder
      #     # Set-PSDebug -Trace 0
      #     # $env:PATH = "$folder;$env:PATH"
      #     # echo "::set-env name=HAXEPATH::$folder"
      #     echo "::add-path::$folder"
      
      - name: Print Haxe version
        shell: bash
        run: haxe -version
      
      - name: "Make Python 3 be available as python3 in the cmdline"
        shell: pwsh
        run: |
          echo "$env:PATH"
          Set-PSDebug -Trace 1
          $pypath = python -c "import sys; print(sys.executable)"
          $py3path = $pypath.replace("python.exe","python3.exe")
          cmd /c mklink $py3path $pypath
          python3 -V
      
      - name: Setup haxelib
        shell: pwsh
        run: |
          mkdir "$(HAXELIB_ROOT)"
          haxelib setup "$(HAXELIB_ROOT)"
      
      - name: Test
        shell: pwsh
        run: |
          echo "$(PATH)"
          haxe RunCi.hxml
        working-directory: ${{github.workspace}}/tests
      

  windows-test:
    # needs: windows-build
    runs-on: windows-latest
    if: false
    env:
      PLATFORM: windows
      TEST: ${{matrix.target}}
      HXCPP_COMPILE_CACHE: ~/hxcache
      ARCH: 32
      HAXELIB_ROOT: C:/haxelib
    strategy:
      fail-fast: false
      matrix:
        # TODO. Lua/flash has never been enabled on our AppVeyor builds.
        # jvm: https://github.com/HaxeFoundation/haxe/issues/8601
        target: [macro, js, hl, cpp, java, cs, php, python, neko]
    steps:
      - uses: actions/checkout@master
        with:
          submodules: recursive
      - uses: actions/download-artifact@v1
        with:
          name: win${{env.ARCH}}Binaries

      - name: Install Neko using snapshot from S3 (Windows)
        if: startsWith(env.PLATFORM, 'windows')
        shell: pwsh
        run: |
          $DOWNLOADDIR="./temp"
          new-item -Name $DOWNLOADDIR -ItemType directory
          Invoke-WebRequest https://build.haxe.org/builds/neko/$env:PLATFORM/neko_latest.zip -OutFile $DOWNLOADDIR/neko_latest.zip
          Expand-Archive $DOWNLOADDIR/neko_latest.zip -DestinationPath $DOWNLOADDIR
          $NEKOPATH = Get-ChildItem $DOWNLOADDIR/neko-*-*
          Write-Host "::add-path::$NEKOPATH"
          Write-Host "::set-env name=NEKOPATH::$NEKOPATH"
      
      - name: Install Neko using snapshot from S3 (Unix)
        # if: (!startsWith(env.PLATFORM, 'windows'))
        if: (startsWith(env.PLATFORM, 'linux'))
        run: |
          set -ex
          sudo add-apt-repository ppa:haxe/snapshots -y
          sudo apt-get update -qqy
          sudo apt-get install -qqy neko
      
          # DOWNLOADDIR="./temp"
          # mkdir $DOWNLOADDIR
          # curl -sSL https://build.haxe.org/builds/neko/$PLATFORM/neko_latest.tar.gz -o $DOWNLOADDIR/neko_latest.tar.gz
          # tar -xf $DOWNLOADDIR/neko_latest.tar.gz -C $DOWNLOADDIR
          # NEKOPATH=`echo $DOWNLOADDIR/neko-*-*`
          # sudo mkdir -p /usr/local/bin
          # sudo mkdir -p /usr/local/lib/neko
          # sudo ln -s $NEKOPATH/{neko,nekoc,nekoml,nekotools}  /usr/local/bin/
          # sudo ln -s $NEKOPATH/libneko.*                      /usr/local/lib/
          # sudo ln -s $NEKOPATH/*.ndll                         /usr/local/lib/neko/
          # sudo ln -s $NEKOPATH/nekoml.std                     /usr/local/lib/neko/
          # sudo ln -s $NEKOPATH/include/*.h                    /usr/local/include/
          # set +x
          # echo ::add-path::$NEKOPATH
          # echo ::set-env name=NEKOPATH::$NEKOPATH
      
      - name: Install Neko using snapshot from S3 (Mac)
        if: (startsWith(env.PLATFORM, 'mac'))
        run: |
          set -ex
          HOMEBREW_NO_AUTO_UPDATE=1
          brew install neko
      
      - name: ldconfig
        if: env.PLATFORM == 'linux64'
        run: |
          sudo ldconfig
          sudo ldconfig /usr/local/lib
      
      - name: Print Neko version
        run: neko -version 2>&1
      
      
      # - name: Quick test
      #   run: |
      #     ls
      #     mkdir win64Binaries
      #     curl -sSL https://build.haxe.org/builds/haxe/windows64/haxe_latest.zip -o ./win64Binaries/haxe_latest.zip
      #     # unzip -qq ./win64Binaries/haxe_latest.zip -d ./win64Binaries/
      #     mv ./win64Binaries/haxe_latest.zip ./win64Binaries/haxe_bin.zip
      # - shell: pwsh
      #   run: |
      #     $name = Get-ChildItem ./haxe_*_* -Name
      #     Rename-Item ./$name haxe_bin.zip
      
      - name: Quick test
        shell: bash
        run: |
          mkdir win64Binaries
          curl -sSL https://build.haxe.org/builds/haxe/windows64/haxe_latest.zip -o ./win64Binaries/haxe_bin.zip
      
      - name: Setup Haxe
        shell: bash
        run: |
          set -ex
          unzip -qq ./win64Binaries/haxe_bin.zip -d ./win64Binaries/
          # mv ./win64Binaries/haxe_latest.zip ./win64Binaries/haxe_bin.zip
          HAXEPATH=`echo $PWD/win64Binaries/haxe_*_*`
          HAXEPATH="$HAXEPATH" | sed 's/\//\\/g'
          # HAXEPATH2=`echo $PWD/`
          # ls $HAXEPATH
          # set PATH="$HAXEPATH:$PATH"
          # set PATH="$HAXEPATH2:$PATH"
          echo "::add-path::$HAXEPATH"
          # echo "::add-path::$HAXEPATH2"
      
      # - name: Setup Haxe
      #   shell: pwsh
      #   run: |
      #     Set-PSDebug -Trace 1
      #     new-item -Name "win64Binaries" -ItemType directory
      #     Invoke-WebRequest https://build.haxe.org/builds/haxe/windows64/haxe_latest.zip -OutFile ./win64Binaries/haxe_bin.zip
      
      #     Set-PSDebug -Trace 1
      #     7z x ./win$($env:ARCH)Binaries/*_bin.zip -owin$($env:ARCH)Binaries
      #     $folder = Get-ChildItem ./win$($env:ARCH)Binaries/haxe_*_* -Name -Directory
      #     echo "$folder"
      #     Rename-Item ./win$($env:ARCH)Binaries/$folder haxe
      #     $folder = '' + ( get-location ) + "\win$($env:ARCH)Binaries\haxe"
      
      #     echo "$folder"
      #     dir "./win$($env:ARCH)Binaries"
      #     dir "./win$($env:ARCH)Binaries\haxe"
      #     dir '' + ( get-location ) + "\win$($env:ARCH)Binaries"
      #     dir '' + ( get-location ) + "\win$($env:ARCH)Binaries\haxe"
      #     dir $folder
      #     # Set-PSDebug -Trace 0
      #     # $env:PATH = "$folder;$env:PATH"
      #     # echo "::set-env name=HAXEPATH::$folder"
      #     echo "::add-path::$folder"
      
      - name: Print Haxe version
        shell: bash
        run: haxe -version
      
      - name: "Make Python 3 be available as python3 in the cmdline"
        shell: pwsh
        run: |
          echo "$env:PATH"
          Set-PSDebug -Trace 1
          $pypath = python -c "import sys; print(sys.executable)"
          $py3path = $pypath.replace("python.exe","python3.exe")
          cmd /c mklink $py3path $pypath
          python3 -V
      
      - name: Setup haxelib
        shell: pwsh
        run: |
          mkdir "$(HAXELIB_ROOT)"
          haxelib setup "$(HAXELIB_ROOT)"
      
      - name: Test
        shell: pwsh
        run: |
          echo "$(PATH)"
          haxe RunCi.hxml
        working-directory: ${{github.workspace}}/tests
      

  # linux-test:
  #   needs: linux-build
  #   runs-on: ubuntu-latest
  #   if: false
  #   env:
  #     PLATFORM: linux64
  #     TEST: ${{matrix.target}}
  #     HXCPP_COMPILE_CACHE: ~/hxcache
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       target: [macro, js, hl, cpp, 'java,jvm', cs, php, python, lua, flash9, neko]
  #       include:
  #         - target: js
  #           # SAUCE: 1
  #           # SAUCE_TUNNEL_ID: 'linux-test'
  #           # SAUCE_BUILD: '${{env.GITHUB_RUN_NUMBER}}' # $(Build.BuildNumber)
  #         - target: hl
  #           APT_PACKAGES: cmake ninja-build libturbojpeg-dev
  #         - target: cpp
  #           APT_PACKAGES: gcc-multilib g++-multilib
  #         - target: lua
  #           APT_PACKAGES: ncurses-dev
  #         - target: flash9
  #           APT_PACKAGES: libglib2.0 libfreetype6 xvfb
  #   steps:
  #     - uses: actions/checkout@master
  #       with:
  #         submodules: recursive
  #     - uses: actions/download-artifact@v1
  #       with:
  #         name: linuxBinaries

  #     @import install-neko.yml
  #     @import test-linux.yml

  # mac-test:
  #   needs: mac-build
  #   runs-on: macos-latest
  #   if: false
  #   env:
  #     PLATFORM: mac
  #     TEST: ${{matrix.target}}
  #     HXCPP_COMPILE_CACHE: ~/hxcache
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       target: [macro, js, hl, cpp, 'java,jvm', cs, php, python, lua, flash9, neko]
  #       include:
  #         - target: hl
  #           BREW_PACKAGES: ninja
  #   steps:
  #     - uses: actions/checkout@master
  #       with:
  #         submodules: recursive
  #     - uses: actions/download-artifact@v1
  #       with:
  #         name: macBinaries

  #     @import install-neko.yml
  #     @import test-mac.yml
